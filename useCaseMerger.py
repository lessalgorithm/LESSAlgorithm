orchastLamps = [2,2,2,2,2,2,2,2,2,5,5,5,30,30,30,30,30,30,30,5,5,5,5,5,5,5,5,5,5,5,5,5,30,30,30,30,30,30,30,30,30,2,2,2,2,2,2,2]
orchastMicro = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,15,15,15,30,30,30,15,15,15,15,15,15,15,15,15,15,5,5,5,2,2,2]
orchastMulti = []

for a,b in zip(orchastLamps,orchastMicro):
	orchastMulti.append(max(a,b))

print orchastMulti

def main():
	orchest_loop =[]
	orchest_loop.append(orchastLamps)
	orchest_loop.append(orchastMicro)
	orchest_loop.append(orchastMulti)
	for orchest in orchest_loop:
		for test in test_loop:
			df = dfLoad(test) # loads environmental variables from location and time defined in NREL.py. If not local it downloads them from the NREL database and parses them for use.
			if not df.empty:
				if test_loop.index(test) == 0: # Currently only works for one loop because of this line but canbe fixed later
					df = sysRequirements(df,test,orchest)
				df = panelEnergyGen(df,test) # Calculates energy generated by solar panel for day
				staticWSN(df,test)
				if debug: print "Calculating the static WSN performance"
				orchasWSN(df,test)
				if debug: print "Calculating the centrally controlled WSN performance"
				enoWSN(df,test)
				if debug: print "Calculating the solely ENO controlled WSN performance"
				lessWSN(df,test) 
				if debug: print "Calculating the LESS=MORE WSN performance"
				dumpData(test)
				if debug: print output_jsons
				graphData(df)
				del output_jsons[:]
	